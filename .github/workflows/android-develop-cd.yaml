name: Android Develop CD [ an/develop ]

on:
  push:
    branches:
      - an/develop
  pull_request:
    branches:
      - an/develop 

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      LOCAL_PROPERTIES_CONTENTS: ${{ secrets.LOCAL_PROPERTIES_CONTENTS }}
    
    defaults:
      run:
        working-directory: ./android/Bottari
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: Restore Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: Calculate versionCode
        run: |
          BUILD_NUMBER=$(printf "%02d" $GITHUB_RUN_NUMBER)
          DATE_CODE=$(date +%y%m%d)
          echo "VERSION_CODE=1${DATE_CODE}${BUILD_NUMBER}" >> $GITHUB_ENV

      - name: Get versionName from Gradle
        run: |
          VERSION_NAME=$(./gradlew -q printVersionName)
          echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_ENV

      - name: Create google-services.json
        run: echo "$GOOGLE_SERVICES_JSON" > ./app/google-services.json

      - name: Create local.properties
        run: echo "$LOCAL_PROPERTIES_CONTENTS" > ./local.properties

      - name: Assemble Debug APK
        run: ./gradlew assembleDebug
        env:
          VERSION_CODE: ${{ env.VERSION_CODE }}
          VERSION_NAME: ${{ env.VERSION_NAME }}

      - name: Deploy to Firebase
        id: firebase
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.ANDROID_FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.ANDROID_CREDENTIAL_FILE_CONTENT }}
          groups: BOTTARI_TEST_GROUP
          file: android/Bottari/app/build/outputs/apk/debug/app-debug.apk
          
      - name: Send Discord Notification
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.ANDROID_DEVELOP_APP_DEPLOY_HOOK_URL }}
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                "embeds": [{
                  "title": "${{ job.status == 'success' && '✅ Firebase Debug 배포 성공' || '❌ Firebase Debug 배포 실패' }}",
                  "description": "an/develop 브랜치에 대한 Debug APK 배포가 완료되었습니다.",
                  "color": ${{ job.status == 'success' && 3066993 || 15158332 }},
                  "fields": [
                    {"name": "🌿 브랜치", "value": "an/develop", "inline": true},
                    {"name": "🔢 versionCode", "value": "${{ env.VERSION_CODE }}", "inline": true},
                    {"name": "🏷 versionName", "value": "${{ env.VERSION_NAME }}", "inline": true},
                    {"name": "🔨 빌드 번호", "value": "${{ github.run_number }}", "inline": true},
                    {"name": "⚡ 상태", "value": "${{ job.status }}", "inline": true},
                    {"name": "🔗 빌드 URL", "value": "[View Build](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})", "inline": false}
                  ],
                  "footer": {"text": "Bottari CI/CD"},
                  "timestamp": "${{ github.event.head_commit.timestamp || github.event.pull_request.updated_at || github.event.repository.pushed_at }}"
                }]
               }' $DISCORD_WEBHOOK
