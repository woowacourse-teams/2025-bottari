name: Android Develop CI/CD [ an/develop ]

on:
  push:
    branches:
      - an/develop
  pull_request:
    branches:
      - an/develop
  workflow_dispatch:
    inputs:
      versionName:
        description: 'Î≤ÑÏ†Ñ Ïù¥Î¶Ñ (Ïòà: 1.0.5)'
        required: false
      releaseNotes:
        description: 'Î¶¥Î¶¨Ï¶à ÎÖ∏Ìä∏'
        required: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      LOCAL_PROPERTIES_CONTENTS: ${{ secrets.LOCAL_PROPERTIES_CONTENTS }}
    
    defaults:
      run:
        working-directory: ./android/Bottari
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: Restore Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: Calculate versionCode
        run: |
          BUILD_NUMBER=$(printf "%02d" $GITHUB_RUN_NUMBER)
          DATE_CODE=$(date +%y%m%d)
          echo "VERSION_CODE=1${DATE_CODE}${BUILD_NUMBER}" >> $GITHUB_ENV

      - name: Get versionName
        run: |
          if [ -n "${{ github.event.inputs.versionName }}" ]; then
            VERSION_NAME="${{ github.event.inputs.versionName }}"
          else
            VERSION_NAME=$(./gradlew -q printVersionName)
          fi
          echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_ENV

      - name: Create google-services.json
        run: echo "$GOOGLE_SERVICES_JSON" > ./app/google-services.json

      - name: Create local.properties
        run: echo "$LOCAL_PROPERTIES_CONTENTS" > ./local.properties

      - name: Assemble Debug APK
        run: ./gradlew assembleDebug
        env:
          VERSION_CODE: ${{ env.VERSION_CODE }}
          VERSION_NAME: ${{ env.VERSION_NAME }}

      - name: Get commits since last release
        id: commit-log
        run: |
          git fetch origin an/develop

          LAST_RELEASE_COMMIT=$(git log origin/an/develop --grep="\[AN\].*Release v" --pretty=format:"%H" -n 1)

          if [ -z "$LAST_RELEASE_COMMIT" ]; then
            COMMITS=$(git log origin/an/develop --pretty=format:"- %s" --no-merges | grep "\[AN\]")
          else
            COMMITS=$(git log ${LAST_RELEASE_COMMIT}..origin/an/develop --pretty=format:"- %s" --no-merges | grep "\[AN\]")
          fi

          echo "COMMITS<<EOF" >> $GITHUB_ENV
          if [ -n "${{ github.event.inputs.releaseNotes }}" ]; then
            echo "${{ github.event.inputs.releaseNotes }}" >> $GITHUB_ENV
          else
            echo "$COMMITS" >> $GITHUB_ENV
          fi
          echo "EOF" >> $GITHUB_ENV

          echo "üìù Î¶¥Î¶¨Ï¶à ÎÖ∏Ìä∏Ïóê Ìè¨Ìï®Îê† Ïª§Î∞ã Î™©Î°ù:"
          echo "$COMMITS"

      - name: Deploy to Firebase
        id: firebase
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.ANDROID_FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.ANDROID_CREDENTIAL_FILE_CONTENT }}
          groups: BOTTARI_TEST_GROUP
          file: android/Bottari/app/build/outputs/apk/debug/app-debug.apk
          releaseNotes: |
            üöÄ Î∞∞Ìè¨ ÎÖ∏Ìä∏
            Î≤ÑÏ†Ñ: ${{ env.VERSION_NAME }}-dev
            ÎπåÎìú Î≤àÌò∏: #${{ github.run_number }}

            Ï£ºÏöî Î≥ÄÍ≤Ω ÏÇ¨Ìï≠:
            ${{ env.COMMITS }}

      - name: Send Discord Notification
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.ANDROID_DEVELOP_APP_DEPLOY_HOOK_URL }}
        run: |
          STATUS_TITLE="${{ job.status == 'success' && '‚úÖ Firebase Debug Î∞∞Ìè¨ ÏÑ±Í≥µ' || '‚ùå Firebase Debug Î∞∞Ìè¨ Ïã§Ìå®' }}"
          STATUS_COLOR="${{ job.status == 'success' && 3066993 || 15158332 }}"
          BUILD_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          curl -H "Content-Type: application/json" -X POST -d "$(cat <<EOF
          {
            "embeds": [
              {
                "title": "$STATUS_TITLE",
                "description": "Firebase Distribution - Debug APK Î∞∞Ìè¨Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.",
                "color": $STATUS_COLOR,
                "fields": [
                  {
                    "name": "üåø Î∏åÎûúÏπò",
                    "value": "an/develop"
                  },
                  {
                    "name": "üè∑ Î≤ÑÏ†Ñ Ï†ïÎ≥¥",
                    "value": " ${{ env.VERSION_NAME }}-dev „Éª #${{ github.run_number }} <${{ env.VERSION_CODE }}>"
                  },
                  {
                    "name": "üîó Action Log",
                    "value": "[Î∞îÎ°úÍ∞ÄÍ∏∞]($BUILD_URL)"
                  }
                ],
                "footer": {
                  "text": "Bottari Develop CI/CD"
                },
                "timestamp": "${{ github.event.head_commit.timestamp || github.event.pull_request.updated_at || github.event.repository.pushed_at }}"
              }
            ]
          }
          EOF
          )" $DISCORD_WEBHOOK
